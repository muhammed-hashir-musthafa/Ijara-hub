name: Deploy

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and push Client image
        run: |
          docker build -t hashir001/ijarahub:client-latest ./Client
          docker push hashir001/ijarahub:client-latest

      - name: Build and push Server image
        run: |
          docker build -t hashir001/ijarahub:server-latest ./Server
          docker push hashir001/ijarahub:server-latest

  deployaws:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull latest images
        run: |
          set -e
          docker pull hashir001/ijarahub:server-latest
          docker pull hashir001/ijarahub:client-latest

      - name: Safe deploy with rollback protection
        run: |
          set -e
          echo "Starting safe deployment..."

          echo "Backing up currently running containers..."
          docker compose ps -q > old_containers.txt || true

          echo "Starting new containers without stopping old ones..."
          docker compose up -d --remove-orphans --force-recreate

          echo "Waiting for containers to stabilize..."
          sleep 10

          echo "Checking if all new containers are healthy..."
          unhealthy=$(docker ps --filter "health=unhealthy" --format "{{.Names}}")
          if [ -n "$unhealthy" ]; then
            echo "Unhealthy containers detected: $unhealthy"
            echo "Rolling back to previous state..."
            docker compose down
            docker start $(cat old_containers.txt)
            exit 1
          fi

          echo "New containers are healthy. Cleaning up old ones..."
          docker container prune -f

          echo "Deployment successful âœ…"

      # - name: Deploy to AWS EC2 via SSH
      #   uses: appleboy/ssh-action@v0.1.10
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ubuntu
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     script: |
      #       cd /home/ubuntu/Ijara-hub
      #       git pull origin main
      #       docker-compose pull
      #       docker-compose up -d
